{"version":3,"sources":["Header.js","Pages/Requirements.js","Pages/AvailableResources.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","title","flexGrow","withRouter","history","pathname","location","classes","currentTabIndex","AppBar","position","Toolbar","Typography","variant","align","className","Button","color","Tabs","value","centered","Tab","tabIndex","label","onClick","push","Requirements","AvailableResources","App","path","exact","Boolean","window","hostname","match","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTAUMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,SAAU,OAqCCC,eAjCA,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,QAAqBC,EAAiB,EAA7BC,SAAYD,SAC/BE,EAAUT,IAEZU,GAAmB,EAMvB,MAJiB,uCAAbH,EAAmDG,EAAkB,EACnD,oDAAbH,IACPG,EAAkB,GAGlB,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,OAAOC,UAAWR,EAAQN,OAAzD,gBAGA,kBAACe,EAAA,EAAD,CAAQC,MAAM,WAAd,UAEF,kBAACC,EAAA,EAAD,CAAMC,MAAOX,EAAiBY,UAAQ,GACpC,kBAACC,EAAA,EAAD,CACEC,SAAU,EACVC,MAAM,sBACNC,QAAS,kBAAMpB,EAAQqB,KAAK,QAE9B,kBAACJ,EAAA,EAAD,CACEC,SAAU,EACVC,MAAM,eACNC,QAAS,kBAAMpB,EAAQqB,KAAK,yBCtCvBC,EAFM,kBAAM,8CCEZC,EAFY,kBAAM,qDCqBlBC,MAhBf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOc,KAAK,qCAAqCC,OAAK,GACpD,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,kDACV,kBAAC,EAAD,UCJUE,QACW,cAA7BC,OAAO1B,SAAS2B,UAEe,UAA7BD,OAAO1B,SAAS2B,UAEhBD,OAAO1B,SAAS2B,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAQC,SAAS,sCACf,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c02f12fc.chunk.js","sourcesContent":["import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport { withRouter } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst Header = ({ history, location: { pathname } }) => {\n  const classes = useStyles();\n\n  let currentTabIndex = -1;\n\n  if (pathname === \"/hack-zurich-codevscovid-frontend/\") currentTabIndex = 0;\n  else if (pathname === \"/hack-zurich-codevscovid-frontend//requirements\")\n    currentTabIndex = 1;\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" align=\"left\" className={classes.title}>\n          Suppy demand\n        </Typography>\n        <Button color=\"inherit\">Login</Button>\n      </Toolbar>\n      <Tabs value={currentTabIndex} centered>\n        <Tab\n          tabIndex={0}\n          label=\"Available Resources\"\n          onClick={() => history.push(\"/\")}\n        />\n        <Tab\n          tabIndex={1}\n          label=\"Requirements\"\n          onClick={() => history.push(\"/requirements\")}\n        />\n      </Tabs>\n    </AppBar>\n  );\n};\n\nexport default withRouter(Header);\n","import React from \"react\";\n\nconst Requirements = () => <div>requirements</div>;\n\nexport default Requirements;\n","import React from \"react\";\n\nconst AvailableResources = () => <div>available resources</div>;\n\nexport default AvailableResources;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Requirements from \"./Pages/Requirements\";\nimport AvailableResources from \"./Pages/AvailableResources\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Switch>\n        <Route path=\"/hack-zurich-codevscovid-frontend/\" exact>\n          <AvailableResources />\n        </Route>\n        <Route path=\"/hack-zurich-codevscovid-frontend/requirements\">\n          <Requirements />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename=\"/hack-zurich-codevscovid-frontend/\">\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}